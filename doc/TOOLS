1. Dependencies
1.1 dsort
print a valid order for building results according to proj/dependencies

1.2 dlist
read from stdin a result name
print to stdout the list of build time dependencies

2. The core tools
All core tools read configuration data frmo stdin and perform some action

2.1 sources
read the following from stdin
 chroot path c
 build path T
 build path in chroot Tc
 result name r
and put everything required to build the result into the build directory:
 sources
 dependencies
 the runbuild script
 the build-script

2.2 runbuild
read the following from stdin
  build path T
 result name r
and run the build script for the result

2.3 finish
read the following from stdin
 chroot path c
 build path T
 build path in chroot Tc
 result name r
fetch the result file from the build directory

2.4 cleanup
read the following from stdin
 chroot path c
 build path T
 build path in chroot Tc
 result name r
and clean up the build directory

2.5 all
read the following from stdin
 chroot path c
 build path T 
 build path in chroot Tc
 result name r
and run all steps required to build without using a chroot environment

3. The wrapper tools

3.1 build-config
read a result name from stdin
print the following to stdout for use as input to most build tools
 chroot path c
 build path T 
 build path in chroot Tc
 result name r

3.2 build-multiple
read one result name per line from stdin until EOF is reached
run 'build-config | all' for each result

3.3 build-multiple-chroot
read one result name per line from stdin until EOF is reached
run 'build-config | all-chroot' from each result

3.4 build
build the project while using tagged source, heads of selected branches
of any available git repositories, or the local working copy

3.5 fetch-git-source
read a source name from stdin and checkout all git repositories for the source

3.6 fetch-project
checkout the project given on the command line

4. The chroot tools
All chroot tools read the following from stdin:
 chroot path c
 build path T
 build path in chroot Tc
 result name r

4.1 chroot-setup
build the chroot environment

4.2 chroot-cleanup
remove the chroot environment

4.3 all-chroot
and run all steps required to build inside the chroot environment

5. Helper tools
5.1 readconfig
read a file from parameter and filter comments

5.2 locate-project-dir
walk up the directory hierarchy and check if we are inside an e2 project
if successful print the following to stdout:
 the current working directory
 the basename of the current working directory
 the project directory
 the path relative to the project directory
 the absolute path to the projects' bin/ directory

5.3 e2
e2 is the main script that calls all local tools. e2 refuses to call a 
local tool if the cwd is not inside a project directory.
Local tools are called from ./bin in the project root unless the
E2_LOCAL_TOOL_PATH environment variable is set.

6. Bootstrap process to check out a project and the corresponding 
   version of the e2 tool

6.1 steps
 1. fetch the e2 tool and perform a global install
 2. clone the project repository (git clone)
    .e2/e2version contain information about the corresponding e2 tool version
 3. fetch the corresponding version of the e2 tool repository to .e2/
    (git clone)
 4. build and install the e2 tool inside the project (make; make install)

6.2 global tools
 e2-su
 e2-bootstrap-project (steps 2,3,4)
 e2

6.3 project tools
 e2-ls-project

7. Hacking e2
This chapter describes how to make hacking the e2 tool convenient.

7.1 (re)install a development version of e2
 install the global tool
    $ make install-global
 install symlinks to the local tools in the e2 working tree
    $ make install-local-symlinks LOCALBINDIR=$PWD/devel
 use the development tools while testing
    $ export E2_LOCAL_TOOL_PATH=$PWD/devel
 It is possible to edit the local tools in the working copy and immediately 
 use them in any project without performing additional steps ('make install').
