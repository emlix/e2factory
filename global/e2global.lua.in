--[[
   e2factory, the emlix embedded build system

   Copyright (C) 2007-2009 Gordon Hecker <gh@emlix.com>, emlix GmbH
   Copyright (C) 2007-2009 Oskar Schirmer <os@emlix.com>, emlix GmbH
   Copyright (C) 2007-2008 Felix Winkelmann, emlix GmbH
   
   For more information have a look at http://www.e2factory.org

   e2factory is a registered trademark by emlix GmbH.

   This file is part of e2factory, the emlix embedded build system.
   
   e2factory is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
]]

package.path="@LIBDIR@/?.lc;@LIBDIR@/?.lua;" .. package.path
package.cpath="@LIBDIR@/?.so;" .. package.cpath

require("e2generic_global")

-- project
--	.name
--	.path
--	.checkout_path
--	.server_versionfile
--	.versionfile
--	.version
--	.e2versionfile
--	.e2version


local install = {}
install [ "PREFIX" ] = "@E2_PREFIX@"
install [ "BINDIR" ] = "@BINDIR@"
install [ "LIBDIR" ] = "@LIBDIR@"
install [ "LIBEXECDIR" ] = "@LIBEXECDIR@"
install [ "TOOLDIR" ] = "@TOOLDIR@"


-- getinstallpath(var)
--
-- lookup an installation path from the install table.

function getinstallpath(var)
  if install [ var ] == nil then
    e2lib.abort("querying non-existent variable in getinstallpath()")
  end
  return install[var]
end

-- setinstallpaths()
--
-- set all installation paths in the environment. That enables the local
-- tools to call the correct e2-su global tools.

function setinstallpaths()
  for var,val in pairs(install) do
    e2util.setenv(var, val, true)
  end
end

-- e2generic table: holds functions that must work across all future
--                  e2 versions

e2generic = {}

--- get the project version from the server
-- @param a project description table
-- @return string: the project version, or nil
-- @return an error object on failure
function e2generic.getprojectversionfromserver(project)
  local e = new_error("getting project version from server failed")
  local tmpdir = e2lib.mktempdir()
  local location = string.format("%s/%s", project.location, 
						project.server_versionfile)
  local rc, re = transport.fetch_file(project.surl, location, tmpdir, nil)
  if not rc then
    return nil, e:cat(re)
  end
  local vfile = string.format("%s/%s", tmpdir, project.server_versionfile)
  local v = e2lib.parse_versionfile(vfile)
  if not v then
    return nil, e:cat("can't parse version file")
  end
  e2lib.rmtempdir(tmpdir)
  return v, nil
end

function e2generic.getprojectversionfromproject(project)
  return e2lib.parse_versionfile("./" .. project.versionfile)
end

function e2generic.gete2versionfromproject(project)
  return e2lib.parse_e2versionfile(project.checkout_path .. "/" .. project.e2versionfile)
end

e2lib.module("e2generic", e2generic)

-- V table: holds functions implementing the  global tool interfaces for each version

V = {}
