#######################################################################
#                                                                     #
#        e2factory README for an extracted project Package           #
#                                                                     #
#######################################################################


1.0                    Introduction

This package has been extracted from a "e2factory" project. "e2
factory" is a build system targeted for embedded Linux-based systems
and provides 100% reproducible software-builds through the use of a
sophisticated hashing algorithm and utilization of a chroot(1) build
environment.

"e2factory" provides a command called "e2-prepare-cargo", which
extracts all relevant files and tools from a project and allows
building a software package outside of this build environment.

"e2-prepare-cargo" exports all necessary binaries, scripts,
configuration-files and sources to rebuild a project independently
from "e2factory", while conforming to the GPL license (the build
system is currently closed source). The extracted package is not
intended for easy modification and restructuring of the project as
this does not match the idea for guaranteed reproducibility.  If you
plan to heavily modify the project, to add some specific software or
to do any other changes please consider using a full version of "e2
factory". Contact emlix for further information.

emlix GmbH
http://www.emlix.com
info@emlix.com
Fon +49 551 30664-0
Fax +49 551 30664-11
Bahnhofsallee 1b
37081 GÃ¶ttingen
Germany


2.0                    Directory Layout before building

After unpacking the you will find the following five directories:

* chroot
* .e2
* proj
* res
* src

2.1 Directory "chroot"

The "chroot" directory contains all needed tools to build the project,
including a whole Linux environment with will be used inside the build
environment. All tools are in binary form and archived in tarballs. Do
not extract them manually. This will be done fully automatically.

2.2. Directory ".e2"

This hidden directory contains all necessary binary tools of "e2
factory".

2.3 Directory "proj"

The directory "proj" contains the configuration of the project. The
"e2factory" configuration files were automatically translated into
Makefiles inside this directory.

2.4 Directory "res"

The "res" directory contains the configuration of each result of the
project, where a result is something produced from a collection of
sources during the build process.  Each result has its own sub
directory. The sub directories contain a buildscript and a
makefile. The makefile was automatically generated from the "e2
factory" project.

2.5 Directory "src"

This directory contains all sources of the project, either in the form
of tarballs and patches or as a collection of flat files. The tarballs
either come directly from the open source projects or were exported
from the repositories used at emlix.  The build-environment is
completely self-contained and does not use any software-repository nor
any source code management (SCM) tools. The full "e2factory" lets you
access git, subversion and cvs repositories to build from. Any other
can easily be integrated.


3.0                    Building it

Rebuilding the project is just one call:

  user@pc:~ # sudo make -C proj/

3.1 Build a single result

By typing

  user@pc:~ # sudo make -C proj/ <res>

only a the result <res> will be built and of course any of its
dependencies.


4.0                    Directory Layout after building

After successfully building the project you will find the following
layout of directories:

* build
* chroot
* .e2
* out
* proj
* res
* src

Most directories are already described above.

4.1 Directory "build"

The "build" directory contains the build environment of every result.
Sources may be changed at build/<result>/tmp/e2/build/<source> if KEEP=1
was set in previouse make call. The latter subdir has to be touched to 
make "make" detect the changes.

  user@pc:~ # touch build/<result>/tmp/e2/build/<source>

This is because the makefiles generated during preparation
for cargo do not know about the dependencies for a specific source, it
just compares timestamps.

4.2 Directory "out"

In the "out" directory all build results are stored for each
result. It depends on the configuration for each result what exactly
is stored here.  You emlix support will tell you which result is the
final one for your project. Most probably more than one result is of
interest.

4.3 Change directories

Both subdir locations, "build" and "out", may be overridden by make
variables.  To build at "/tmp/build", store results at "../out" and
keep the chroot environments for manual use, do:

  user@pc:~ # make -C proj BUILD=/tmp/build OUT=${PWD}/../out

Note the use of the shell variable PWD to avoid relative paths.


5.0                    System requirements

5.1 Size / disk usage

Building a package uses quite a lot of disk storage, it is always good
to have several gigabytes free. The exact amount depends on the size
of the project.

5.2 Installed Software

The package can be build on almost any current linux system on a x86
32-Bit or 64-Bit PC. Make sure a native compiler and make is
installed. A meta-package called "build-essentials" should be
installed on a debian/ubuntu based system.
